Proceso de autenticación con DEX, APISEX, NATS y la Base de datos de Nats. Tendremos que realizar dos fases:
- Fase de registro: dode los usuarios nos prestan su información y se crea la credenciales de usuario.
- Fase de uso_El usuario se authentica en el servicio FaaS para posterirmente poder registrar funciones o usar funciones de otros usuarios.
    
auth/
│
├── backend/             # Código fuente del backend en Golang
│   ├── main.go          # Archivo principal para iniciar el servidor
│   ├── handlers/        # Controladores para manejar las peticiones
│   │   ├── auth.go      # Funciones para registro y autenticación
│   │   └── ...          # Otros controladores
│   ├── models/          # Modelos para manejar la lógica de negocio
│   │   ├── user.go      # Modelo de usuario
│   │   └── ...          # Otros modelos
│   ├── services/        # Servicios para lógica de negocio (llamadas a la DB, etc.)
│   ├── routes/          # Rutas de la API
│   ├── config/          # Configuraciones (conexiones a DB, variables de entorno)
│   └── ...              # Otros archivos (middlewares, etc.)
│
├── frontend/            # Código fuente del frontend en Golang (HTML, CSS, JS)
│   ├── index.html       # Archivo HTML principal
│   ├── styles/          # Archivos CSS
│   ├── js/              # Archivos JavaScript
│   └── ...              # Otros archivos estáticos (imágenes, fuentes, etc.)
│
└── README.md            # Documentación del proyecto

Si usamos Node y Typescript para froneend y Goland para backend, mejor crear:

auth/
│
├── backend/                 # Backend en Go
│   ├── main.go              # Archivo principal del servidor
│   ├── controllers/         # Controladores de las rutas
│   ├── models/              # Modelos para la lógica de negocio
│   ├── routes/              # Definición de las rutas de la API
│   ├── services/            # Servicios y lógica de autenticación
│   └── go.mod               # Módulos de Go
│
├── frontend/                # Frontend en Node.js y TypeScript
│   ├── public/              # Archivos públicos (HTML, CSS)
│   ├── src/                 # Código fuente del frontend
│   │   ├── app.ts           # Lógica de interacción con la API
│   ├── package.json         # Dependencias de Node.js
│   ├── tsconfig.json        # Configuración de TypeScript
│   └── ...
│
└── README.md                # Documentación del proyecto

* Nota: Se debe decidir: 
      1. Authenticación: 
          A) Proceso de authtenticación: Si el proceso de autentiocación se realizará tan sólo con usuario/passwrd o requerira de una autenticción
             vicredenciales.
          B) Si se decide que las funciones registradas por los usuarios están en abierto:
                     - Se debe realiar algún proceso de tokenixación?
             Si hay que autentucarse para usar las funciones registradas del resto de usuarios;
                     - Creamos un proceso de id temporal par ael uso de una cierta función o conjutno de funciones?
                     - Crear un id para todsa ls peticiones sobre el resto de funciones
  
     2. Registro y usuo de funciones:  
          A) si las funciones rgistradas están abiertas al público en general o son privadas al servicio. Es decir,
             si hay ue autenticarse al servicio FaaSioFlex para poder usar las funciones registradas del resto de usuarios o no hace falta.
               
