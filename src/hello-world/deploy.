name: Docker CI/CD  # Nombre del flujo de trabajo

on:  # Define los eventos que activan el flujo de trabajo
  push:  # Se activa en un evento de "push" (cuando se suben cambios)
    branches:  # Especifica las ramas donde se debe activar
      - main  # Solo en la rama "main"

jobs:  # Define los trabajos que se ejecutarán
  build:  # Trabajo para construir la imagen Docker
    runs-on: ubuntu-latest  # Especifica el entorno donde se ejecutará el trabajo

    steps:  # Pasos que se ejecutarán en este trabajo
      - name: Checkout Code  # Nombre del paso
          uses: actions/checkout@v3  # Usa la acción para hacer checkout del código fuente

      - name: Set up Docker Buildx  # Configura Docker Buildx para construir imágenes
          uses: docker/setup-buildx-action@v2  # Acción para configurar Docker Buildx

      - name: Check if Dockerfile Exists  # Comprueba si existe el Dockerfile
          id: check_dockerfile  # Asigna un ID al paso para referenciarlo más adelante
          run: |  # Ejecuta los siguientes comandos
            if [ ! -f Dockerfile ]; then  # Verifica si el Dockerfile no existe
              echo "Dockerfile not found, exiting."  # Mensaje de error si no se encuentra
              exit 1  # Sale del script con código de error

      - name: Build Docker Image  # Nombre del paso para construir la imagen Docker
          if: steps.check_dockerfile.outcome == 'success'  # Solo si el paso anterior fue exitoso
          run: |  # Ejecuta los siguientes comandos
            docker build -t my-go-app:latest .  # Construye la imagen Docker con el nombre "my-go-app:latest"

      - name: Check if Docker Image Exists  # Comprueba si la imagen Docker fue construida
          id: check_image  # Asigna un ID al paso
          run: |  # Ejecuta los siguientes comandos
            if ! docker images -q my-go-app:latest; then  # Verifica si la imagen existe
              echo "No Docker image found. No image was built."  # Mensaje si no se encuentra la imagen
              exit 1  # Sale del script con código de error

      - name: Run Tests  # Nombre del paso para ejecutar pruebas
          if: steps.check_image.outcome == 'success'  # Solo si el paso anterior fue exitoso
          run: |  # Ejecuta los siguientes comandos
            docker run --rm my-go-app:latest || echo "Error ejecutando la aplicación"  # Ejecuta la aplicación en un contenedor y captura errores

      - name: Login to Docker Hub  # Nombre del paso para iniciar sesión en Docker Hub
          if: steps.check_image.outcome == 'success'  # Solo si la imagen existe
          uses: docker/login-action@v3  # Usa la acción para iniciar sesión en Docker Hub
          with:  # Proporciona la configuración necesaria
            username: ${{ secrets.DOCKER_USERNAME }}  # Nombre de usuario almacenado como secreto
            password: ${{ secrets.DOCKER_PASSWORD }}  # Contraseña almacenada como secreto

      - name: Push Docker Image  # Nombre del paso para subir la imagen a Docker Hub
          if: steps.check_image.outcome == 'success'  # Solo si la imagen existe
          run: |  # Ejecuta los siguientes comandos
            docker push my-go-app:latest  # Sube la imagen Docker a Docker Hub 

  run_in_codespace:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Codespaces environment
        run: |
          set -e
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          sudo apt-get update
          if dpkg -l | grep -q containerd; then
            sudo apt-get remove --purge -y containerd
            sudo apt-get autoremove -y
          fi
          sudo apt-get install -y docker.io

      - name: Start Docker service
        run: |
          sudo systemctl start docker
          sudo systemctl enable docker

      - name: Run Docker container in Codespaces
        run: |
          docker run -d -p 8080:8080 --name my-go-app ${{ secrets.DOCKER_USERNAME }}/my-go-app:latest

      - name: Install ngrok
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt-get update
          sudo apt-get install -y ngrok

      - name: Run ngrok
        run: |
          nohup ngrok http 8080 > ngrok.log &
          sleep 5
          NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r .tunnels[0].public_url)
          echo "La URL pública de ngrok es: $NGROK_URL"
        env:
          NGROK_AUTHTOKEN: ${{ secrets.NGROK_AUTHTOKEN }}

      - name: Test the application
        run: |
          curl -s "$NGROK_URL" || echo "La aplicación no responde correctamente"

      - name: Stop and Remove Docker container
        if: always()
        run: |
          docker stop my-go-app
          docker rm my-go-app

  #deploy:
    #runs-on: ubuntu-latest
    #needs: build

    #steps:
      #- name: Checkout Code
        #uses: actions/checkout@v2

      #- name: Deploy to Server
        #if: success()
        #run: |
          #ssh user@your-server-ip "docker pull my-go-app:latest && docker run -d my-go-app:latest"

      #- name: Build Docker image
        #run: |
         # docker build -t faasioflex:latest .

      #- name: Log in to Fly.io
        #uses: superfly/flyctl-actions/login@v1
        #with:
          #api_token: ${{ secrets.FLY_API_TOKEN }}

      #- name: Deploy to Fly.io
       # run: |
         # flyctl deploy --remote-only --app faasioflex

      #- name: Log in to Heroku
        #run: |
          #echo "${{ secrets.HEROKU_API_KEY }}" | docker login --username=_ --password-stdin registry.heroku.com

      #- name: Deploy to Heroku
       # run: |
         # heroku container:push web --app faasioflex
          #heroku container:release web --app faasioflex
